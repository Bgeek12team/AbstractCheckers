<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textHelp.Text" xml:space="preserve">
    <value>Проект "Шашки Калибра"
Данный проект представляет собой обычную и не совсем игру "Шашки".
Почему не совсем обычную? Сейчас расскажем.

В стандартном режиме всё просто. Белые шашки - белые котики, черные шашки - черные котики.
Тыкаешь в шашку, затем тыкаешь на поле, куда хочешь переместиться. 

Далее, мы подготовили Демо-сценарий игры и случайные события, в которых есть не только обычные шашки и поля.

Начнем с новых фигур:
Шашка Марка - на доске выглядит как накаченный Марк, 
перемещается исключительно по горизонтали/вертикали,
иногда ленится и не ходит, так что не надейтесь на неё!

Шашка Бомба - на доске выглядит как черная птица, своим ходом взрывает все вокруг себя,
может самоуничтожиться до конца игры!

Шашка Дамка - имеет визуал девушки из домекано,
перемещается также как и обычные дамки в стандартной игре,
Черная дамка играет за черных, светлая за белых

Шашка Прямая - всё просто, выглядит как почти прямая,
перемещается исключительно вперед по прямой, относительно себя

С шашками покончили. Переходим к необычным ячейкам.
Клетка Тренболон - имеет вид тренболона, превращает любую шашку, 
наступившую на неё в шашку Марка

Клетка Катапульта - выглядит как катапульта. Может быть черной и белой.
Черная перемещает фигуру, которая попала на катапульту вниз на рандомное число клеток,
а белая, наоборот, вверх

Клетка Мина - выглядит как мина. Может взорваться вместе с фигурой, а может и не взорваться,
все зависит от удачи игрока.

Клетка Пружина - клетка, которая перебрасывает шашку на другую клетку, в зависимости от того, с какого расстояния на нее наступают, может выбросить за пределы поля, может набросить на другую шашку и прибить ее (в том числе на свою же!)

Клетка Интеграл - опасная клетка для шашки Марка, если вы наступите шашкой Марка на эту клетку,
то потеряете свою фигуру. Будьте аккуратны!

Клетка Торнадо - неудобная клетка, стоит обходить её стороной, иначе, если вы в неё наступите,
то доска перевернется на 90 градусов и играть станет гораздо сложнее.

Случайные события - квинтэссенция хаоса. поле имеет размер от 7 до 8, заполняется случайными шашками и фигурами. возможны приступы эпилепсии!

Приятной игры! Надеемся, что вам понравится, ваш Калибр!</value>
  </data>
</root>